// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: domain/delivery/proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationService_Get_FullMethodName                    = "/proto.RelationService/Get"
	RelationService_Create_FullMethodName                 = "/proto.RelationService/Create"
	RelationService_Delete_FullMethodName                 = "/proto.RelationService/Delete"
	RelationService_DeleteByQueries_FullMethodName        = "/proto.RelationService/DeleteByQueries"
	RelationService_BatchOperation_FullMethodName         = "/proto.RelationService/BatchOperation"
	RelationService_GetAllNamespaces_FullMethodName       = "/proto.RelationService/GetAllNamespaces"
	RelationService_Check_FullMethodName                  = "/proto.RelationService/Check"
	RelationService_GetShortestPath_FullMethodName        = "/proto.RelationService/GetShortestPath"
	RelationService_GetAllPaths_FullMethodName            = "/proto.RelationService/GetAllPaths"
	RelationService_GetAllObjectRelations_FullMethodName  = "/proto.RelationService/GetAllObjectRelations"
	RelationService_GetAllSubjectRelations_FullMethodName = "/proto.RelationService/GetAllSubjectRelations"
	RelationService_ClearAllRelations_FullMethodName      = "/proto.RelationService/ClearAllRelations"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*RelationsResponse, error)
	Create(ctx context.Context, in *RelationCreateRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Empty, error)
	DeleteByQueries(ctx context.Context, in *DeleteByQueriesRequest, opts ...grpc.CallOption) (*Empty, error)
	BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringsResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*Empty, error)
	GetShortestPath(ctx context.Context, in *GetShortestPathRequest, opts ...grpc.CallOption) (*PathResponse, error)
	GetAllPaths(ctx context.Context, in *GetAllPathsRequest, opts ...grpc.CallOption) (*PathsResponse, error)
	GetAllObjectRelations(ctx context.Context, in *GetAllObjectRelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error)
	GetAllSubjectRelations(ctx context.Context, in *GetAllSubjectRelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error)
	ClearAllRelations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*RelationsResponse, error) {
	out := new(RelationsResponse)
	err := c.cc.Invoke(ctx, RelationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Create(ctx context.Context, in *RelationCreateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Delete(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteByQueries(ctx context.Context, in *DeleteByQueriesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_DeleteByQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_BatchOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetAllNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringsResponse, error) {
	out := new(StringsResponse)
	err := c.cc.Invoke(ctx, RelationService_GetAllNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetShortestPath(ctx context.Context, in *GetShortestPathRequest, opts ...grpc.CallOption) (*PathResponse, error) {
	out := new(PathResponse)
	err := c.cc.Invoke(ctx, RelationService_GetShortestPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetAllPaths(ctx context.Context, in *GetAllPathsRequest, opts ...grpc.CallOption) (*PathsResponse, error) {
	out := new(PathsResponse)
	err := c.cc.Invoke(ctx, RelationService_GetAllPaths_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetAllObjectRelations(ctx context.Context, in *GetAllObjectRelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error) {
	out := new(RelationsResponse)
	err := c.cc.Invoke(ctx, RelationService_GetAllObjectRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetAllSubjectRelations(ctx context.Context, in *GetAllSubjectRelationsRequest, opts ...grpc.CallOption) (*RelationsResponse, error) {
	out := new(RelationsResponse)
	err := c.cc.Invoke(ctx, RelationService_GetAllSubjectRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ClearAllRelations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_ClearAllRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	Get(context.Context, *Relation) (*RelationsResponse, error)
	Create(context.Context, *RelationCreateRequest) (*Empty, error)
	Delete(context.Context, *Relation) (*Empty, error)
	DeleteByQueries(context.Context, *DeleteByQueriesRequest) (*Empty, error)
	BatchOperation(context.Context, *BatchOperationRequest) (*Empty, error)
	GetAllNamespaces(context.Context, *Empty) (*StringsResponse, error)
	Check(context.Context, *CheckRequest) (*Empty, error)
	GetShortestPath(context.Context, *GetShortestPathRequest) (*PathResponse, error)
	GetAllPaths(context.Context, *GetAllPathsRequest) (*PathsResponse, error)
	GetAllObjectRelations(context.Context, *GetAllObjectRelationsRequest) (*RelationsResponse, error)
	GetAllSubjectRelations(context.Context, *GetAllSubjectRelationsRequest) (*RelationsResponse, error)
	ClearAllRelations(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) Get(context.Context, *Relation) (*RelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRelationServiceServer) Create(context.Context, *RelationCreateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRelationServiceServer) Delete(context.Context, *Relation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationServiceServer) DeleteByQueries(context.Context, *DeleteByQueriesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByQueries not implemented")
}
func (UnimplementedRelationServiceServer) BatchOperation(context.Context, *BatchOperationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperation not implemented")
}
func (UnimplementedRelationServiceServer) GetAllNamespaces(context.Context, *Empty) (*StringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamespaces not implemented")
}
func (UnimplementedRelationServiceServer) Check(context.Context, *CheckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRelationServiceServer) GetShortestPath(context.Context, *GetShortestPathRequest) (*PathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortestPath not implemented")
}
func (UnimplementedRelationServiceServer) GetAllPaths(context.Context, *GetAllPathsRequest) (*PathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaths not implemented")
}
func (UnimplementedRelationServiceServer) GetAllObjectRelations(context.Context, *GetAllObjectRelationsRequest) (*RelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjectRelations not implemented")
}
func (UnimplementedRelationServiceServer) GetAllSubjectRelations(context.Context, *GetAllSubjectRelationsRequest) (*RelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjectRelations not implemented")
}
func (UnimplementedRelationServiceServer) ClearAllRelations(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllRelations not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Get(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Create(ctx, req.(*RelationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Delete(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteByQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteByQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_DeleteByQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteByQueries(ctx, req.(*DeleteByQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_BatchOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BatchOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_BatchOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BatchOperation(ctx, req.(*BatchOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetAllNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetAllNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetAllNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetAllNamespaces(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetShortestPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortestPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetShortestPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetShortestPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetShortestPath(ctx, req.(*GetShortestPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetAllPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetAllPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetAllPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetAllPaths(ctx, req.(*GetAllPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetAllObjectRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllObjectRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetAllObjectRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetAllObjectRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetAllObjectRelations(ctx, req.(*GetAllObjectRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetAllSubjectRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubjectRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetAllSubjectRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetAllSubjectRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetAllSubjectRelations(ctx, req.(*GetAllSubjectRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ClearAllRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ClearAllRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ClearAllRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ClearAllRelations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RelationService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RelationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RelationService_Delete_Handler,
		},
		{
			MethodName: "DeleteByQueries",
			Handler:    _RelationService_DeleteByQueries_Handler,
		},
		{
			MethodName: "BatchOperation",
			Handler:    _RelationService_BatchOperation_Handler,
		},
		{
			MethodName: "GetAllNamespaces",
			Handler:    _RelationService_GetAllNamespaces_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _RelationService_Check_Handler,
		},
		{
			MethodName: "GetShortestPath",
			Handler:    _RelationService_GetShortestPath_Handler,
		},
		{
			MethodName: "GetAllPaths",
			Handler:    _RelationService_GetAllPaths_Handler,
		},
		{
			MethodName: "GetAllObjectRelations",
			Handler:    _RelationService_GetAllObjectRelations_Handler,
		},
		{
			MethodName: "GetAllSubjectRelations",
			Handler:    _RelationService_GetAllSubjectRelations_Handler,
		},
		{
			MethodName: "ClearAllRelations",
			Handler:    _RelationService_ClearAllRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/delivery/proto/service.proto",
}
