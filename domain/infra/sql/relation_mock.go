// Code generated by MockGen. DO NOT EDIT.
// Source: domain/infra/sql/relation.go

// Package sqldom is a generated GoMock package.
package sqldom

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/skyrocketOoO/zanazibar-dag/domain"
)

// MockRelationRepository is a mock of RelationRepository interface.
type MockRelationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRelationRepositoryMockRecorder
}

// MockRelationRepositoryMockRecorder is the mock recorder for MockRelationRepository.
type MockRelationRepositoryMockRecorder struct {
	mock *MockRelationRepository
}

// NewMockRelationRepository creates a new mock instance.
func NewMockRelationRepository(ctrl *gomock.Controller) *MockRelationRepository {
	mock := &MockRelationRepository{ctrl: ctrl}
	mock.recorder = &MockRelationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationRepository) EXPECT() *MockRelationRepositoryMockRecorder {
	return m.recorder
}

// BatchOperation mocks base method.
func (m *MockRelationRepository) BatchOperation(operations []domain.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOperation", operations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchOperation indicates an expected call of BatchOperation.
func (mr *MockRelationRepositoryMockRecorder) BatchOperation(operations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOperation", reflect.TypeOf((*MockRelationRepository)(nil).BatchOperation), operations)
}

// Create mocks base method.
func (m *MockRelationRepository) Create(relation domain.Relation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRelationRepositoryMockRecorder) Create(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRelationRepository)(nil).Create), relation)
}

// Delete mocks base method.
func (m *MockRelationRepository) Delete(relation domain.Relation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRelationRepositoryMockRecorder) Delete(relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRelationRepository)(nil).Delete), relation)
}

// DeleteAll mocks base method.
func (m *MockRelationRepository) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRelationRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRelationRepository)(nil).DeleteAll))
}

// DeleteByQueries mocks base method.
func (m *MockRelationRepository) DeleteByQueries(queries []domain.Relation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByQueries", queries)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByQueries indicates an expected call of DeleteByQueries.
func (mr *MockRelationRepositoryMockRecorder) DeleteByQueries(queries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByQueries", reflect.TypeOf((*MockRelationRepository)(nil).DeleteByQueries), queries)
}

// GetAll mocks base method.
func (m *MockRelationRepository) GetAll(options ...PageOptions) ([]domain.Relation, uint, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].([]domain.Relation)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRelationRepositoryMockRecorder) GetAll(options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRelationRepository)(nil).GetAll), options...)
}

// GetAllNamespaces mocks base method.
func (m *MockRelationRepository) GetAllNamespaces() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamespaces")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNamespaces indicates an expected call of GetAllNamespaces.
func (mr *MockRelationRepositoryMockRecorder) GetAllNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamespaces", reflect.TypeOf((*MockRelationRepository)(nil).GetAllNamespaces))
}

// Query mocks base method.
func (m *MockRelationRepository) Query(query domain.Relation) ([]domain.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query)
	ret0, _ := ret[0].([]domain.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRelationRepositoryMockRecorder) Query(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRelationRepository)(nil).Query), query)
}
