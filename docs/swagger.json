{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/relation/": {
            "get": {
                "description": "Query relations based on specified parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Query relations based on parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object Namespace",
                        "name": "object-namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Object Name",
                        "name": "object-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Relation",
                        "name": "relation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject Namespace",
                        "name": "subject-namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject Name",
                        "name": "subject-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject Relation",
                        "name": "subject-relation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DataResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new relation based on the provided JSON payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Create a new relation",
                "parameters": [
                    {
                        "description": "Relation object to be created",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Relation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a relation based on the provided JSON payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Delete a relation",
                "parameters": [
                    {
                        "description": "Relation object to be deleted",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Relation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/check": {
            "post": {
                "description": "Check if a relation link exists between two entities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Check if a relation link exists",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.Check.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/clear-all-relations": {
            "post": {
                "description": "Clear all relations in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Clear all relations",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/get-all-namespaces": {
            "post": {
                "description": "Retrieve all unique namespaces for relations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Get all unique namespaces",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.StringsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/get-all-object-relations": {
            "post": {
                "description": "Get all relations for a given object specified by namespace, name, and relation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Get all relations for a given object",
                "parameters": [
                    {
                        "description": "Object information (namespace, name, relation)",
                        "name": "subject",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.GetAllObjectRelations.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All relations for the specified object",
                        "schema": {
                            "$ref": "#/definitions/domain.DataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/get-all-paths": {
            "post": {
                "description": "Get all paths between two entities in a relation graph",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Get all paths between two entities in a relation graph",
                "parameters": [
                    {
                        "description": "Relation object specifying the entities",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.GetAllPaths.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All paths between entities",
                        "schema": {
                            "$ref": "#/definitions/delivery.GetAllPaths.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/get-all-subject-relations": {
            "post": {
                "description": "Get all relations for a given subject specified by namespace, name, and relation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Get all relations for a given subject",
                "parameters": [
                    {
                        "description": "Subject information (namespace, name, relation)",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.GetAllSubjectRelations.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All relations for the specified subject",
                        "schema": {
                            "$ref": "#/definitions/domain.DataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        },
        "/relation/get-shortest-path": {
            "post": {
                "description": "Get the shortest path between two entities in a relation graph",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relation"
                ],
                "summary": "Get the shortest path between two entities in a relation graph",
                "parameters": [
                    {
                        "description": "comment",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.GetShortestPath.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Shortest path between entities",
                        "schema": {
                            "$ref": "#/definitions/domain.DataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "delivery.Check.requestBody": {
            "type": "object",
            "required": [
                "object",
                "subject"
            ],
            "properties": {
                "object": {
                    "$ref": "#/definitions/domain.Node"
                },
                "search_condition": {
                    "$ref": "#/definitions/domain.SearchCondition"
                },
                "subject": {
                    "$ref": "#/definitions/domain.Node"
                }
            }
        },
        "delivery.GetAllObjectRelations.requestBody": {
            "type": "object",
            "required": [
                "subject"
            ],
            "properties": {
                "collect_condition": {
                    "$ref": "#/definitions/domain.CollectCondition"
                },
                "max_depth": {
                    "type": "integer"
                },
                "search_condition": {
                    "$ref": "#/definitions/domain.SearchCondition"
                },
                "subject": {
                    "$ref": "#/definitions/domain.Node"
                }
            }
        },
        "delivery.GetAllPaths.requestBody": {
            "type": "object",
            "required": [
                "object",
                "subject"
            ],
            "properties": {
                "object": {
                    "$ref": "#/definitions/domain.Node"
                },
                "search_condition": {
                    "$ref": "#/definitions/domain.SearchCondition"
                },
                "subject": {
                    "$ref": "#/definitions/domain.Node"
                }
            }
        },
        "delivery.GetAllPaths.response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/domain.Relation"
                        }
                    }
                }
            }
        },
        "delivery.GetAllSubjectRelations.requestBody": {
            "type": "object",
            "required": [
                "object"
            ],
            "properties": {
                "collect_condition": {
                    "$ref": "#/definitions/domain.CollectCondition"
                },
                "max_depth": {
                    "type": "integer"
                },
                "object": {
                    "$ref": "#/definitions/domain.Node"
                },
                "search_condition": {
                    "$ref": "#/definitions/domain.SearchCondition"
                }
            }
        },
        "delivery.GetShortestPath.requestBody": {
            "type": "object",
            "required": [
                "object",
                "subject"
            ],
            "properties": {
                "object": {
                    "$ref": "#/definitions/domain.Node"
                },
                "search_condition": {
                    "$ref": "#/definitions/domain.SearchCondition"
                },
                "subject": {
                    "$ref": "#/definitions/domain.Node"
                }
            }
        },
        "domain.CollectCondition": {
            "type": "object",
            "properties": {
                "in": {
                    "$ref": "#/definitions/domain.Compare"
                }
            }
        },
        "domain.Compare": {
            "type": "object",
            "properties": {
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "domain.DataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Relation"
                    }
                }
            }
        },
        "domain.ErrResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "domain.Node": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "relation": {
                    "type": "string"
                }
            }
        },
        "domain.Relation": {
            "type": "object",
            "properties": {
                "object_name": {
                    "type": "string"
                },
                "object_namespace": {
                    "type": "string"
                },
                "relation": {
                    "type": "string"
                },
                "subject_name": {
                    "type": "string"
                },
                "subject_namespace": {
                    "type": "string"
                },
                "subject_relation": {
                    "type": "string"
                }
            }
        },
        "domain.SearchCondition": {
            "type": "object",
            "properties": {
                "in": {
                    "$ref": "#/definitions/domain.Compare"
                }
            }
        },
        "domain.StringsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}