definitions:
  delivery.Check.requestBody:
    properties:
      object:
        $ref: '#/definitions/domain.Node'
      search_condition:
        $ref: '#/definitions/domain.SearchCondition'
      subject:
        $ref: '#/definitions/domain.Node'
    required:
    - object
    - subject
    type: object
  delivery.GetAllObjectRelations.requestBody:
    properties:
      collect_condition:
        $ref: '#/definitions/domain.CollectCondition'
      max_depth:
        type: integer
      search_condition:
        $ref: '#/definitions/domain.SearchCondition'
      subject:
        $ref: '#/definitions/domain.Node'
    required:
    - subject
    type: object
  delivery.GetAllPaths.requestBody:
    properties:
      object:
        $ref: '#/definitions/domain.Node'
      search_condition:
        $ref: '#/definitions/domain.SearchCondition'
      subject:
        $ref: '#/definitions/domain.Node'
    required:
    - object
    - subject
    type: object
  delivery.GetAllPaths.response:
    properties:
      data:
        items:
          items:
            $ref: '#/definitions/domain.Relation'
          type: array
        type: array
    type: object
  delivery.GetAllSubjectRelations.requestBody:
    properties:
      collect_condition:
        $ref: '#/definitions/domain.CollectCondition'
      max_depth:
        type: integer
      object:
        $ref: '#/definitions/domain.Node'
      search_condition:
        $ref: '#/definitions/domain.SearchCondition'
    required:
    - object
    type: object
  delivery.GetShortestPath.requestBody:
    properties:
      object:
        $ref: '#/definitions/domain.Node'
      search_condition:
        $ref: '#/definitions/domain.SearchCondition'
      subject:
        $ref: '#/definitions/domain.Node'
    required:
    - object
    - subject
    type: object
  domain.CollectCondition:
    properties:
      in:
        $ref: '#/definitions/domain.Compare'
    type: object
  domain.Compare:
    properties:
      names:
        items:
          type: string
        type: array
      namespaces:
        items:
          type: string
        type: array
      relations:
        items:
          type: string
        type: array
    type: object
  domain.DataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.Relation'
        type: array
    type: object
  domain.ErrResponse:
    properties:
      error:
        type: string
    type: object
  domain.Node:
    properties:
      name:
        type: string
      namespace:
        type: string
      relation:
        type: string
    type: object
  domain.Relation:
    properties:
      object_name:
        type: string
      object_namespace:
        type: string
      relation:
        type: string
      subject_name:
        type: string
      subject_namespace:
        type: string
      subject_relation:
        type: string
    type: object
  domain.SearchCondition:
    properties:
      in:
        $ref: '#/definitions/domain.Compare'
    type: object
  domain.StringsResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /relation/:
    delete:
      consumes:
      - application/json
      description: Delete a relation based on the provided JSON payload.
      parameters:
      - description: Relation object to be deleted
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/domain.Relation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Delete a relation
      tags:
      - Relation
    get:
      consumes:
      - application/json
      description: Query relations based on specified parameters.
      parameters:
      - description: Object Namespace
        in: query
        name: object-namespace
        type: string
      - description: Object Name
        in: query
        name: object-name
        type: string
      - description: Relation
        in: query
        name: relation
        type: string
      - description: Subject Namespace
        in: query
        name: subject-namespace
        type: string
      - description: Subject Name
        in: query
        name: subject-name
        type: string
      - description: Subject Relation
        in: query
        name: subject-relation
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DataResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Query relations based on parameters
      tags:
      - Relation
    post:
      consumes:
      - application/json
      description: Create a new relation based on the provided JSON payload.
      parameters:
      - description: Relation object to be created
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/domain.Relation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Create a new relation
      tags:
      - Relation
  /relation/check:
    post:
      consumes:
      - application/json
      description: Check if a relation link exists between two entities
      parameters:
      - description: comment
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/delivery.Check.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Check if a relation link exists
      tags:
      - Relation
  /relation/clear-all-relations:
    post:
      consumes:
      - application/json
      description: Clear all relations in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Clear all relations
      tags:
      - Relation
  /relation/get-all-namespaces:
    post:
      description: Retrieve all unique namespaces for relations.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.StringsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Get all unique namespaces
      tags:
      - Relation
  /relation/get-all-object-relations:
    post:
      consumes:
      - application/json
      description: Get all relations for a given object specified by namespace, name,
        and relation
      parameters:
      - description: Object information (namespace, name, relation)
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/delivery.GetAllObjectRelations.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: All relations for the specified object
          schema:
            $ref: '#/definitions/domain.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Get all relations for a given object
      tags:
      - Relation
  /relation/get-all-paths:
    post:
      consumes:
      - application/json
      description: Get all paths between two entities in a relation graph
      parameters:
      - description: Relation object specifying the entities
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/delivery.GetAllPaths.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: All paths between entities
          schema:
            $ref: '#/definitions/delivery.GetAllPaths.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Get all paths between two entities in a relation graph
      tags:
      - Relation
  /relation/get-all-subject-relations:
    post:
      consumes:
      - application/json
      description: Get all relations for a given subject specified by namespace, name,
        and relation
      parameters:
      - description: Subject information (namespace, name, relation)
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/delivery.GetAllSubjectRelations.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: All relations for the specified subject
          schema:
            $ref: '#/definitions/domain.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Get all relations for a given subject
      tags:
      - Relation
  /relation/get-shortest-path:
    post:
      consumes:
      - application/json
      description: Get the shortest path between two entities in a relation graph
      parameters:
      - description: comment
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/delivery.GetShortestPath.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Shortest path between entities
          schema:
            $ref: '#/definitions/domain.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResponse'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResponse'
      summary: Get the shortest path between two entities in a relation graph
      tags:
      - Relation
swagger: "2.0"
